<dtml-call "REQUEST.RESPONSE.setHeader('Cache-Control','public, max-age=3600')">
<dtml-call "REQUEST.RESPONSE.setHeader('Content-Type', 'text/javascript; charset=utf-8')">

  /**
   * Array of button action-codes.
   */
  arrButton = new Array();
  arrButton[0] = "trashcan";
  arrButton[1] = "cut";
  arrButton[2] = "copy";
  arrButton[3] = "paste";

  /**
   * Array of button types.
   */
  arrButtonType = new Array();
  arrButtonType[0] = 0;
  arrButtonType[1] = 0;
  arrButtonType[2] = 0;
  arrButtonType[3] = 1;

  /**
   *
   * @param id
   * @param sort_id
   */
  function paramExec(id, sort_id) 
  {
    var fm = document.forms['form0'];
    if (id && id != null) 
    {
      for (var i = 0; i < fm.elements.length; i++) 
      {
        el = fm.elements[i];
        if ( (el.name == 'ids:list')
            && (el.value == id) )
          el.checked = true;
      }
    }
    if (sort_id && sort_id != null) 
    {
      el = fm.elements['_sort_id:int'];
      if (el) 
      {
        el.value = sort_id;
      }
    }
  }

  /**
   *
   * @param target
   * @param label
   */
  function confirmExec(target, label)
  {
    var fm = document.forms['form0'];
    var b = true;
    var i = countSelectedCheckboxes(fm,'ids');
    if (target.indexOf("../") == 0) {
      i = 1;
    }
    if (target.indexOf("manage_rollbackObjChanges") >= 0) {
      b = confirm("<dtml-var "js_quote(getZMILangStr('MSG_ROLLBACKVERSIONCHANGES'))">");
    }
    else if (target.indexOf("manage_cutObjects") >= 0) {
      var msg1 = "<dtml-var "js_quote(getZMILangStr('MSG_CONFIRM_CUTOBJS'))">";
      msg1 = msg1.replace("%i",""+i);
      <dtml-let langs="getDescendantLanguages(lang)">
       var msg2 = "";
       <dtml-if "_.len(langs)>1">
        msg2 += "<dtml-var "js_quote(getZMILangStr('MSG_CONFIRM_DESCENDANT_LANGS'))">";
        var s = "";
        <dtml-in langs>
        s += "<dtml-var "getLanguageLabel(_['sequence-item'])">";
        <dtml-unless sequence-end>
        s += ",";
        </dtml-unless>
        </dtml-in>
        msg2 = msg2.replace("%s",""+s);
       </dtml-if>
      </dtml-let>
      var msg = msg1 + ' ' + msg2;
      b = i > 0 && confirm(msg);
    }
    else if (target.indexOf("manage_eraseObjs") >= 0) {
      var msg = "<dtml-var "js_quote(getZMILangStr('MSG_CONFIRM_DELOBJS'))">";
      msg = msg.replace("%i",""+i);
      b = i > 0 && confirm(msg);
    }
    else if (target.indexOf("manage_deleteObjs") >= 0) {
      var msg1 = "<dtml-var "js_quote(getZMILangStr('MSG_CONFIRM_TRASHOBJS'))">";
      msg1 = msg1.replace("%i",""+i);
      <dtml-let langs="getDescendantLanguages(lang)">
       var msg2 = "";
       <dtml-if "_.len(langs)>1">
        msg2 += "<dtml-var "js_quote(getZMILangStr('MSG_CONFIRM_DESCENDANT_LANGS'))">";
        var s = "";
        <dtml-in langs>
        s += "<dtml-var "getLanguageLabel(_['sequence-item'])">";
        <dtml-unless sequence-end>
        s += ",";
        </dtml-unless>
        </dtml-in>
        msg2 = msg2.replace("%s",""+s);
       </dtml-if>
      </dtml-let>
      var msg = msg1 + ' ' + msg2;
      b = i > 0 && confirm(msg);
    }
    else if (target.indexOf("manage_executeMetacmd") >=0 ) {
     <dtml-in "getMetaCmdIds()">
      <dtml-let metaCmd="getMetaCmd(_['sequence-item'])">
       <dtml-if "_.len(metaCmd['description'])>0">
        if (label == '<dtml-var "metaCmd['name']">') {
          b = confirm("<dtml-var "metaCmd['description']">");
        }
       </dtml-if>
      </dtml-let>
     </dtml-in>
    }
    else if (target == "") {
      b = false;
    }
    return b;
  }

  /**
   *
   * @param target
   */
  function submitExec(target, id, sort_id) 
  {
    var fm = $('form[name=form0]');
    if (target.indexOf("../") == 0) {
      fm.append('<input type="hidden" name="ids:list" value="'+$('#id').val()+'"/>');
    }
    $('form[name=form0]>input[id=_id]').val( id);
    $('form[name=form0]>input[id=_sort_id]').val( sort_id);
    fm.attr('action',target);
    fm.submit();
  }

  /**
   *
   * @param target
   * @param label
   * @param id
   * @param sort_id
   */
  function submitHref(target, label, id, sort_id)
  {
    paramExec(id,sort_id);
    var b = confirmExec(target,label);
    if (b) 
    {
      if ((target.indexOf("manage_pasteObjs")>=0) ||
          (target.indexOf("manage_pasteObjects")>=0) ||
          (target.indexOf("manage_copyObjects")>=0) ||
          (target.indexOf("manage_cutObjects")>=0) ||
          (target.indexOf("manage_undoObjs")>=0) ||
          (target.indexOf("manage_deleteObjs")>=0) ||
          (target.indexOf("manage_eraseObjs")>=0)) 
      {
        submitExec(target,id,sort_id);
      }
      else 
      {
        var fm = document.forms['submitHrefForm'];
        fm.action = target;
        fm.elements['id'].value = id;
        fm.elements['_sort_id:int'].value = sort_id;
        fm.elements['custom'].value = label;
        fm.submit();
      }
    }
    return b;
  }

  /**
   * Submit select.
   *
   * @param e
   * @param id
   * @param sort_id
   */
  function submitSelect(e, id, sort_id) 
  {
    var i = e.selectedIndex;
    var label = e.options[i].text;
    var action = e.options[i].value;
    if (action.indexOf("%s/") == 0)
    {
      action = id + action.substring(2, action.length);
    }
    if (action.indexOf('?') > 0)
    {
      location.href = action;
    }
    else
    {
      if (!submitHref(action, label, id, sort_id))
      {
        e.selectedIndex = 0;
      }
    }
  }

  /**
   *
   * @param e
   * @param id
   * @param sort_id
   */
  function submitSelectCompactview(e, id, sort_id) 
  {
    var fm = e.form;
    for (i = 0; i < fm.elements.length; i++) 
    {
      var el = fm.elements[i];
      if ( (el.type == 'checkbox')
           && (el.name == 'ids:list') 
           && (el.checked) )
      {
        var elSortId = fm.elements['sort_id_'+el.value];
        if (elSortId)
        {
          id = el.value;
          sort_id = elSortId.value;
        }
      }
    }
    submitSelect(e, id, sort_id);
  }

  /**
   *
   * @param ac		Action-Code (0=trashcan, 1=cut, 2=copy, 3=paste)
   * @param offs	Offset (0=pageBottom, 1=pageTop)
   */
  function getDocumentImage(ac, offs) 
  {
    id = ac + "Btn" + offs;
    return document.images[id];
  }

  /**
   *
   * @param ac		Action-Code (0=trashcan, 1=cut, 2=copy, 3=paste)
   */
  function btnActive(ac) 
  {
    var fm = document.forms['form0'];
    for (var i = 0; i < arrButton.length; i++) 
    {
      if (arrButton[i] == ac) 
      {
        if (arrButtonType[i] == 0)
        {
          return (countSelectedCheckboxes(fm,'ids') > 0)
        }
        else
        {
          return true;
        }
      }
    }
  }

  /**
   *
   */
  function switchButtons(uncheckedClassName) 
  {
    for (var i = 0; i < arrButton.length; i++) {
       btnOnMouseOut(arrButton[i]);
    }
    var fm = document.forms['form0'];
    var els = fm.elements;
    for ( var i = 0; i < els.length; i++) {
      var el = els[ i];
      if ( el.type == 'checkbox' && el.name == 'ids:list') {
        var tr = document.getElementById( 'tr_'+el.value);
        if ( el.checked) 
          tr.className = "zmiTeaserColor";
        else if (uncheckedClassName)
          tr.className = uncheckedClassName;
        else
          tr.className = "";
      }
    }
  }

  /**
   * Hover button on mouse-over event.
   *
   * @param ac		Action-Code (0=trashcan, 1=cut, 2=copy, 3=paste)
   */
  function btnOnMouseOver(ac) 
  {
    for (var offs = 0; offs <= 1; offs++) 
    {
      var img = getDocumentImage(ac,offs);
      if (img != null) 
      {
        if (btnActive(ac))
        {
          img.src = '<dtml-var MISC_ZMS>btn_' + ac + '1.gif';
        }
        else
        {
          img.src = '<dtml-var MISC_ZMS>btn_' + ac + '0.gif';
        }
      }
    }
  }

  /**
   * Lower button on mouse-out event.
   *
   * @param ac		Action-Code (0=trashcan, 1=cut, 2=copy, 3=paste)
   */
  function btnOnMouseOut(ac) 
  {
    for (var offs = 0; offs <= 1; offs++) 
    {
      var img = getDocumentImage(ac,offs);
      if (img != null) 
      {
        if (btnActive(ac))
        {
          img.src = '<dtml-var MISC_ZMS>btn_' + ac + '1.gif';
        }
        else
        {
          img.src = '<dtml-var MISC_ZMS>btn_' + ac + '0.gif';
        }
      }
    }
  }

  /**
   *
   * @param ac		Action-Code (0=trashcan, 1=cut, 2=copy, 3=paste)
   * @param target
   * @param sort_id
   */
  function clipboardBtnClick(ac, target, sort_id) 
  {
    var fm = document.forms['form0'];
    if (btnActive(ac)) 
    {
      paramExec(null,sort_id);
      var i = countSelectedCheckboxes(fm,'ids');
      var b = confirmExec(target);
      if (b) 
      {
        submitExec(target,'e',sort_id);
      }
    }
  }

  /**
   * This method (un-)checks all on page and refreshs buttons.
   *
   * @param v		Boolean value for new (un-)checked state.
   */
  function slctBtnClick(v) 
  {
    var fm = document.forms['form0'];
    selectCheckboxes(fm,v);
    switchButtons();
  }
