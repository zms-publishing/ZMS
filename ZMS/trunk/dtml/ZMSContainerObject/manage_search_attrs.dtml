<dtml-var manage_page_header>
<title><dtml-var "getZMILangStr('TAB_SEARCH')"></title>
<script language="JavaScript">
<!--//

var canceled = false;
var currentIndex = 0;
var children = new Array();
var selected_meta_ids = new Array();
var selected_attributes = new Array();
var selected_option = null;

/**
 * Search
 */
function searchBtnClick(id,href) 
{
  var icon_cancel = document.getElementById('icon_cancel');
  icon_cancel.style.display = "inline";
  icon_cancel.style.visibility = "visible";
  canceled = false;
  currentIndex = 0;
  children = new Array();
  // Retrieve meta-types.
  selected_meta_ids = new Array();
  var el = document.getElementById( "meta_ids");
  for (var i = 0; i < el.options.length; i++) {
    var op = el.options[ i];
    if ( op.selected == true) {
      selected_meta_ids[op.value] = true;
    }
  }
  // Retrieve attributes.
  selected_attributes = new Array();
  for ( var i = 0; i < 5; i++) {
    var select = document.getElementById( "attr_name"+i);
    var input = document.getElementById( "attr_value"+i);
    var index = select.selectedIndex;
    if ( input.value.length > 0) {
      var l = selected_attributes.length;
      selected_attributes[l] = new Object();
      selected_attributes[l]['key'] = select.options[index].value;
      selected_attributes[l]['value'] = input.value.toLowerCase();
    }
  }
  // Retrieve option.
  var el = document.getElementById( "option");
  selected_option = el.options[el.selectedIndex].value;
  // Start processing.
  var resultDiv = document.getElementById( "resultDiv_"+id);
  resultDiv.innerHTML = '';
  var searchDiv = document.getElementById( "searchDiv_"+id);
  searchDiv.style.display = "block";
  searchDiv.style.visibility = "visible";
  ajaxGetChildNodes(id,href);
}

/**
 * Stop
 */
function stopBtnClick()
{
  var icon_cancel = document.getElementById('icon_cancel');
  icon_cancel.style.display = "none";
  icon_cancel.style.visibility = "hidden";
  canceled = true;
}

/**
 * Ensure visible
 */
function ensureVisible(div) 
{
  if ( div.style.display == "none" && 
       div.style.visibility == "hidden") {
     div.style.display = "block";
     div.style.visibility = "visible";
     ensureVisible( div.parentNode);
  }
}

/**
 * Get child-nodes.
 */
function ajaxGetChildNodes(id,href) 
{
  // JQuery.AJAX.get
  $(document.body).css( "cursor", "wait");
  $.get( href+"/ajaxGetChildNodes?id="+id+"&lang=<dtml-var lang>&preview=preview", processResponseGetChildNodes);
}

/**
 * Process response.
 */
function processResponseGetChildNodes(data) 
{
  $(document.body).css( "cursor", "auto");
  var id = data.getElementsByTagName('pages')[0].getAttribute('id');
  var el = document.getElementById( "resultDiv_"+id);
  var currentDiv = document.getElementById( "currentDiv");
  var pages = data.getElementsByTagName('page');
  var k = 0;
  for (var i = 0; i < pages.length && !canceled; i++) {
    
    var page = pages[i];
    var page_id = page.getAttribute("id");
    var id = page_id.substring( page_id.indexOf("_")+1);
    var page_absolute_url = page.getAttribute("absolute_url");
    var page_meta_id = page.getAttribute("meta_id");
    var page_access = page.getAttribute("access")=="1";
    var page_has_children = page.getAttribute("has_children")=="True";
    var page_is_page = page.getAttribute("is_page")=="True" || page.getAttribute("is_page")=="1";
    
    currentIndex++;
    var currentHTML = page.getAttribute("index_html");
    if ( currentHTML.length > 80) {
      currentHTML = "..."+currentHTML.substr( currentHTML.length - 80);
    }
    //currentHTML += "<hr/>";
    //currentHTML += "Stack:<br/>";
    //for (var j = 0; j < children.length; j++) {
    //  currentHTML += children[j]['absolute_url']+"<br/>";
    //}
    currentDiv.innerHTML = "[" + currentIndex + "  <dtml-var "getZMILangStr('ATTR_OBJECTS')">]: " + currentHTML + " (Stack: " + children.length + ")";
    
    var found = true;
    // meta-types.
    if ( found) {
      found = selected_meta_ids[page_meta_id];
    }
    // attributes.
    if ( found && selected_attributes.length > 0) {
      var found_attr = false;
      if ( selected_option == 'AND') {
        found_attr = true;
      }
      for (var l = 0; l < selected_attributes.length; l++) {
        var key = selected_attributes[l]['key'];
        var value = selected_attributes[l]['value'].toLowerCase();
        var found_element = false;
        for (var k = 0; k < page.childNodes.length; k++) {
          if ( key == '*' || key == page.childNodes[k].nodeName) {
            for (var m = 0; m < page.childNodes[k].childNodes.length; m++) {
              var d = page.childNodes[k].childNodes[m].data;
              if ( d) {
                found_element |= d.toLowerCase().indexOf( value) >= 0;
              }
            }
          }
        }
        if ( selected_option == 'AND') {
          found_attr &= found_element;
        } else {
          found_attr |= found_element;
        }
      }
      found &= found_attr;
    }
    if ( page_has_children || found) {
      var div = document.createElement( "div");
      div.setAttribute( "id", page_id);
      div.setAttribute( "class", "form-small");
      div.setAttribute( "className", "form-small");
      div.style.margin = "1px 1px 1px 1px";
      div.style.display = "none";
      div.style.visibility = "hidden";
      if ( page_has_children) {
        var img = document.createElement( "img");
        img.setAttribute( "id", page_id + "_img");
        img.setAttribute( "src", "<dtml-var MISC_ZMS>pl.gif");
        img.setAttribute( "width", 16);
        img.setAttribute( "height", 16);
        img.setAttribute( "border", 0);
        img.setAttribute( "align", "absmiddle");
        img.setAttribute( "title", "+");
        div.appendChild( img);
      }
      else {
        var img = document.createElement( "img");
        img.setAttribute( "src", "<dtml-var spacer_gif>");
        img.setAttribute( "width", 16);
        img.setAttribute( "height", 16);
        img.setAttribute( "border", 0);
        img.setAttribute( "align", "absmiddle");
        img.setAttribute( "title", "");
        div.appendChild( img);
      }
      var a = document.createElement( "a");
      a.setAttribute( "href", page_absolute_url+"/manage");
      a.setAttribute( "class", "zmi");
      a.setAttribute( "className", "zmi");
      var img = document.createElement( "img");
      img.setAttribute( "src", page.getAttribute("display_icon"));
      img.setAttribute( "title", page.getAttribute("display_title"));
      img.setAttribute( "border", 0);
      img.setAttribute( "align", "absmiddle");
      a.appendChild( img);
      if ( found) {
        a.style.backgroundColor = "#F0F0FF";
        a.style.border = "1px dotted #0000F0";
      }
      a.appendChild( document.createTextNode( page.getAttribute("titlealt")));
      div.appendChild( a);
      var resultDiv = document.createElement( "div");
      resultDiv.setAttribute( "id", "resultDiv_"+page_id);
      resultDiv.setAttribute( "class", "form-small");
      resultDiv.setAttribute( "className", "form-small");
      resultDiv.style.margin = "4px 1px 1px 8px";
      resultDiv.style.display = "none";
      resultDiv.style.visibility = "hidden";
      div.appendChild( resultDiv);
      el.appendChild( div);
      if ( found) {
        ensureVisible(div);
      }
      if ( page_has_children) {
        var child = new Array();
        child['page_id'] = page_id;
        child['id'] = id;
        child['absolute_url'] = page_absolute_url;
        children.splice(k,0,child);
        k++;
      }
    }
  }
  
  if ( !canceled && children.length > 0) {
    var child = children.shift()
    var page_id = child['page_id'];
    var absolute_url = child['absolute_url'];
    ajaxGetChildNodes(page_id,absolute_url);
  }
  else {
    currentDiv.innerHTML = "[" + currentIndex + " <dtml-var "getZMILangStr('ATTR_OBJECTS')">]";
    var icon_cancel = document.getElementById('icon_cancel');
    icon_cancel.style.display = "none";
    icon_cancel.style.visibility = "hidden";
  }
}

var meta_ids = new Array();
var meta_ids_backup = new Array();
var obj_attrs = new Array();

/**
 * Meta-Types Change
 */
function metaTypesChange(el) 
{
  obj_attrs = new Array();
  // Get selected meta-types.
  meta_ids = new Array();
  var ops = el.options;
  for (var i = 0; i < ops.length; i++) {
    if ( ops[ i].selected) {
      meta_ids.push( ops[ i].value);
    }
  }
  // Check if selected meta-types were already processed.
  if ( meta_ids.length == meta_ids_backup.length) {
    var eq = true;
    for ( var i = 0; i < meta_ids.length && eq; i++) {
      eq &= meta_ids[i] == meta_ids_backup[i];
    }
    if ( eq) {
      return;
    }
  }
  // Remember processed meta-types.
  for ( var i = 0; i < meta_ids.length; i++) {
    meta_ids_backup[i] = meta_ids[i];
  }
  if ( meta_ids.length > 0) {
    ajaxGetObjAttrs( meta_ids.pop());
  }
  else {
    finishGetObjAttrs();
  }
}

/**
 * Get Object-Attributes
 */
function ajaxGetObjAttrs(meta_id)
{
  // JQuery.AJAX.get
  $(document.body).css( "cursor", "wait");
  $.get( "ajaxGetObjAttrs?meta_id="+meta_id, processResponseGetObjAttrs);
}

/**
 * Process response.
 */
function processResponseGetObjAttrs(data) 
{
  $(document.body).css( "cursor", "auto");
  var items = data.getElementsByTagName('dictionary')[0].childNodes;
  for (var i = 0; i < items.length; i++) {
    var item = items[i];
    if ( item.nodeType == 1 && item.nodeName == "item") {
      var obj_attr = item.getAttribute("key");
      var itemItems = item.firstChild.childNodes;
      for (var ii = 0; ii < itemItems.length; ii++) {
        var itemItem = itemItems[ii];
        if ( itemItem.nodeType == 1 && itemItem.nodeName == "item") {
          var itemItemKey = itemItem.getAttribute("key");
          if ( itemItemKey == "type") {
            obj_attr += " (" + itemItem.firstChild.data + ")";
          }
        }
      }
      var c = obj_attrs[ obj_attr];
      if ( c)
        c = c + 1;
      else
        c = 1;
      obj_attrs[ obj_attr] = c;
    }
  }
  if ( meta_ids.length > 0) {
    ajaxGetObjAttrs( meta_ids.pop());
  }
  else {
    finishGetObjAttrs();
  }
}

/**
 * Finish response.
 */
function finishGetObjAttrs() 
{
  $(document.body).css( "cursor", "auto");
  var selectedValues = new Array();
  // Count attributes.
  var count_obj_attrs = 0;
  for ( var obj_attr in obj_attrs) {
    var label = obj_attr;
    if ( label.indexOf( "(string)") > 0 ||
         label.indexOf( "(text)") > 0 ||
         label.indexOf( "(richtext)") > 0 ||
         label.indexOf( "(int)") > 0 ||
         label.indexOf( "(date)") > 0 ||
         label.indexOf( "(datetime)") > 0 ||
         label.indexOf( "(time)") > 0
       ) {
      count_obj_attrs++;
    }
  }
  // Clear select-lists and remember selected values.
  for ( var i = 0; i < 5; i++) {
    var select = document.getElementById( "attr_name"+i);
    var index = select.selectedIndex;
    if ( index >= 0 && index < select.options.length)
      selectedValues[i] = select.options[index].value;
    else
      selectedValues[i] = '';
    select.length = 0;
    select.options.length = 0;
    var label = "* [" + count_obj_attrs + " <dtml-var "getZMILangStr('ATTR_ATTRS')">]";
    var value = "*";
    var defaultSelected = selectedValues[i] == value;
    var option = new Option( label, value, defaultSelected);
    select.options[ select.length] = option;
  }
  // Populate select-lists.
  for ( var obj_attr in obj_attrs) {
    for ( var i = 0; i < 5; i++) {
      var select = document.getElementById( "attr_name"+i);
      var label = obj_attr;
      if ( label.indexOf( "(string)") > 0 ||
           label.indexOf( "(text)") > 0 ||
           label.indexOf( "(richtext)") > 0 ||
           label.indexOf( "(int)") > 0 ||
           label.indexOf( "(date)") > 0 ||
           label.indexOf( "(datetime)") > 0 ||
           label.indexOf( "(time)") > 0
         ) {
        var value = obj_attr.substring( 0, obj_attr.indexOf( " "));
        var defaultSelected = selectedValues[i] == value;
        var option = new Option( label, value, defaultSelected);
        select.options[ select.length] = option;
      }
    }
  }
}

window.onload = function(e) {
  metaTypesChange(document.getElementById('meta_ids'));
}

//-->
</script>
</head>
<dtml-var "manage_tabs(_,_,my_manage_options=[{'label':getZMILangStr('TAB_SEARCH'),'action':''}],p_languages=_.True)">
<dtml-if "AUTHENTICATED_USER.has_permission('ZMS Administrator',this())">
 <dtml-var "manage_tabs_sub(_,_,manage_sub_options=[{'label':'TAB_SEARCH','action':'manage_search'},{'label':'ATTR_ATTRS','action':'manage_search_attrs'}])">
</dtml-if>
<dtml-var f_bo_area>

<!-- FORM -->
<form action="<dtml-var URL>" method="get" onsubmit="return false;">
<input type="hidden" name="lang" value="<dtml-var lang>">
<input type="hidden" name="preview" value="preview">

  <dtml-var "f_headline(_,_,headline=getZMILangStr('SEARCH_HEADER'))">

  <table cellspacing="1" cellpadding="0" border="0">
  <tr valign="top">
   <td><div class="form-label"><dtml-var "getZMILangStr('ATTR_TYPE')"></div></td>
   <td><div class="form-label"><dtml-var "getZMILangStr('ATTR_ATTRS')"></div></td>
   <td><div class="form-label"><dtml-var "getZMILangStr('ATTR_OPTION')"></div></td>
  </tr>
  <tr valign="top">
   <td>
    <div class="form-element">
     <select class="form-element" id="meta_ids" name="meta_ids" multiple="multiple" size="5" onkeyup="metaTypesChange(this)" onchange="metaTypesChange(this)">
      <dtml-in "getMetaobjIds(excl_ids=['ZMS'])">
       <dtml-let meta_id=sequence-item>
        <option value="<dtml-var meta_id>" selected="selected"><dtml-var "display_type(REQUEST,meta_id)"></option>
       </dtml-let>
      </dtml-in>
     </select>
    </div>
   </td>
   <td>
    <table cellspacing="1" cellpadding="0" border="0">
    <dtml-in "_.range(5)">
     <tr>
      <td>
       <div class="form-element">
        <select id="attr_name<dtml-var sequence-index>" name="attr_name<dtml-var sequence-index>">
        </select>
       </div>
      </td>
      <td>
       <div class="form-element">
        <input type="text" id="attr_value<dtml-var sequence-index>" name="attr_value<dtml-var sequence-index>"/>
       </div>
      </td>
     </tr>
    </dtml-in>
    </table>
   </td>
   <td>
    <div class="form-element">
     <select class="form-element" id="option" name="option">
      <dtml-in "['AND','OR']">
       <option value="<dtml-var sequence-item>"><dtml-var "getZMILangStr(_['sequence-item'])"></option>
      </dtml-in>
     </select>
    </div>
   </td>
  </tr>
  <tr valign="middle">
   <td colspan="3" class="form-element">
    <hr size="1"/>
    <input class="form-submit" type="submit" name="btn" value="<dtml-var "getZMILangStr('BTN_SEARCH')" html_quote>" onclick="searchBtnClick('<dtml-var id>','<dtml-var absolute_url>')">
   </td>
  </tr>
  </table>

  </form>

<div id="searchDiv_<dtml-var id>" class="form-label" style="display:none;visibility:hidden;">
 <dtml-var "getZMILangStr('SEARCH_HEADERRESULT')">
 <a href="#" onclick="stopBtnClick();" onmouseover="document.getElementById('icon_cancel').src='<dtml-var MISC_ZMS>icon_logout1.gif'" onmouseout="document.getElementById('icon_cancel').src='<dtml-var MISC_ZMS>icon_logout0.gif'"><img id="icon_cancel" src="<dtml-var MISC_ZMS>icon_logout0.gif" alt="<dtml-var "getZMILangStr('BTN_CANCEL')">" border="0" align="absmiddle"/></a>
 <div id="currentDiv" class="form-small" style="background-color:#ffffe0;border:1px solid black;margin:4px;"/>
</div>
<div id="resultDiv_<dtml-var id>"></div>

<br/><br/>

<dtml-var f_eo_area>
<dtml-var manage_page_footer>
