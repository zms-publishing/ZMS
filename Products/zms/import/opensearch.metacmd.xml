<?xml version="1.0" encoding="utf-8" ?>

<list>
  <item type="dictionary">
    <dictionary>
      <item key="data"><![CDATA[import json
import requests
from requests.auth import HTTPBasicAuth
requests.packages.urllib3.disable_warnings(requests.packages.urllib3.exceptions.InsecureRequestWarning)
# import pdb

def manage_zcatalog_export_schema( self):
  zmscontext = self
  properties = {}
  properties['loc'] = {'type':'text'}
  properties['index_html'] = {'type':'text'}
  properties['meta_id'] = {'type':'keyword'}
  properties['lang'] = {'type':'keyword'}
  # properties['home_id'] = {'type':'keyword'}
  zca = zmscontext.getCatalogAdapter()
  attrs = zca.getAttrs()
  for attr_id in zca._getAttrIds():
    attr = attrs.get(attr_id,{})
    attr_type = attr.get('type', 'string')
    attr_type = {'string':'text'}.get(attr_type,attr_type)
    attr_type = attr_type == 'select'and 'keyword' or attr_type
    property = {}
    property['type'] = attr_type
    properties[attr_id] = property
  mappings = {'properties':properties}
  dictionary = {'mappings':mappings}

  url = self.getConfProperty('opensearch.url', 'https://localhost:9200')
  home_id = self.getHome().id
  username = self.getConfProperty('opensearch.username', 'admin')
  password = self.getConfProperty('opensearch.password', 'admin')
  verify = bool(self.getConfProperty('opensearch.ssl.verify', ''))
  auth = HTTPBasicAuth(username,password)
  headers = {'Content-type': 'application/x-ndjson'}
  # pdb.set_trace()
  response = requests.delete('%s/%s'%(url,home_id),auth=auth,verify=verify)
  response = requests.put('%s/%s'%(url,home_id),auth=auth,headers=headers,json=dictionary,verify=verify)
  response.raise_for_status()
  # json_obj = response.json()
  # data = json.dumps(json_obj, separators=(",", ":"), indent=2)
  data = json.dumps(mappings, indent=2)
  return data]]>
      </item>
      <item key="description"><![CDATA[Export JSON schema?]]></item>
      <item key="execution" type="int">False</item>
      <item key="icon_clazz"><![CDATA[fas fa-cogs]]></item>
      <item key="id">manage_zcatalog_export_schema</item>
      <item key="meta_type"><![CDATA[External Method]]></item>
      <item key="meta_types" type="list">
        <list>
          <item>*</item>
        </list>
      </item>
      <item key="name"><![CDATA[#1 Export schema]]></item>
      <item key="package">com.zms.foundation.zcatalog.opensearch</item>
      <item key="revision">0.0.1</item>
      <item key="roles" type="list">
        <list>
          <item>*</item>
        </list>
      </item>
      <item key="title"><![CDATA[Export JSON schema]]></item>
    </dictionary>
  </item>
  <item type="dictionary">
    <dictionary>
      <item key="data"><![CDATA[# --// manage_zcatalog_export_data //--

import json
from Products.zms import standard

def manage_zcatalog_export_data( self):
  msg = []
  request = self.REQUEST
  RESPONSE =  request.RESPONSE
  zmscontext = self.getLinkObj(request.get('uid','{$}'))
  home = zmscontext.getDocumentElement()
  home_id = home.getPhysicalPath()
  home_id = home_id[home_id.index('content')-1]
  inst_home = zmscontext.Control_Panel.getINSTANCE_HOME()
  path = home_id
  node = home
  while True:
    node = node.getPortalMaster()
    if node is None: break
    path = node.getHome().getId() + '/' + path
  
  zmscontext.f_standard_html_request(request)
  data = []
  zca = zmscontext.getCatalogAdapter()
  attrs = zca.getAttrs()
  def cb(node, d):
    if node.meta_id in ['ZMSFile']:
      try:
        # pdfminer.six (https://github.com/pdfminer/pdfminer.six)
        # Pdfminer.six is a community maintained fork of the original PDFMiner. 
        # It is a tool for extracting information from PDF documents. It focuses
        # on getting and analyzing text data. Pdfminer.six extracts the text 
        # from a page directly from the sourcecode of the PDF. 
        # pip install pdfminer.six
        from io import BytesIO, StringIO
        from pdfminer.converter import TextConverter
        from pdfminer.layout import LAParams
        from pdfminer.pdfdocument import PDFDocument
        from pdfminer.pdfinterp import PDFResourceManager, PDFPageInterpreter
        from pdfminer.pdfpage import PDFPage
        from pdfminer.pdfparser import PDFParser
        output_string = StringIO()
        ob_file = node.attr('file')
        in_file = BytesIO(ob_file.getData())
        parser = PDFParser(in_file)
        standard.writeError(node,"pdfminer: doc")
        doc = PDFDocument(parser)
        rsrcmgr = PDFResourceManager()
        device = TextConverter(rsrcmgr, output_string, laparams=LAParams())
        interpreter = PDFPageInterpreter(rsrcmgr, device)
        for page in PDFPage.create_pages(doc):
            interpreter.process_page(page)
        v = output_string.getvalue()
        d['standard_html'] = v
      except:
        standard.writeError(node,"can't pdfminer")
        d['standard_html'] = '@@%s:%s'%('/'.join(node.getPhysicalPath()),'file')
    dindex = {"index":{"_index":d['home_id'],"_id":node.get_uid()}}
    for k in ['id','custom']:
      if k in d:
        del d[k]
    data.append(json.dumps(dindex))
    data.append(json.dumps(d))
  zca.get_sitemap(cb, zmscontext, recursive=True)
  data = '\n'.join([standard.pystr(x) for x in data])+'\n'
  data = data.replace(zmscontext.getHref2IndexHtml(request),zmscontext.absolute_url()[len(request['SERVER_URL']):]+'/')
  
  jsonpath = '%s/var/%s/opensearch/%s.json'%(inst_home,path,home_id)
  try:
      bak = standard.localfs_read(jsonpath,mode='b')
      standard.localfs_write('%s.bak'%jsonpath,bak,mode='b')
  except:
      standard.writeError(zmscontext,"can't backup")
  standard.localfs_write(jsonpath,data,mode='b')
  msg.append('%i json-bytes written to %s'%(len(data),jsonpath))
  
  RESPONSE.setHeader('Content-Type','text/plain;charset=utf-8')
  msg.append("Done!")
  return '\n'.join(msg)

# --// /manage_zcatalog_create_sitemap //--]]>
      </item>
      <item key="description"><![CDATA[Export JSON data?]]></item>
      <item key="execution" type="int">False</item>
      <item key="icon_clazz"><![CDATA[fas fa-cogs]]></item>
      <item key="id">manage_zcatalog_export_data</item>
      <item key="meta_type"><![CDATA[External Method]]></item>
      <item key="meta_types" type="list">
        <list>
          <item>*</item>
        </list>
      </item>
      <item key="name"><![CDATA[#2 Export data]]></item>
      <item key="package">com.zms.foundation.zcatalog.opensearch</item>
      <item key="revision">0.0.1</item>
      <item key="roles" type="list">
        <list>
          <item>*</item>
        </list>
      </item>
      <item key="title"><![CDATA[Export JSON data]]></item>
    </dictionary>
  </item>
  <item type="dictionary">
    <dictionary>
      <item key="data"><![CDATA[# --// manage_zcatalog_put_data //--

def manage_zcatalog_put_data( self):
  request = self.REQUEST
  RESPONSE =  request.RESPONSE
  zmscontext = self.getLinkObj(request.get('uid','{$}'))
  home = zmscontext.getDocumentElement()
  home_id = home.getPhysicalPath()
  home_id = home_id[home_id.index('content')-1]
  inst_home = zmscontext.Control_Panel.getINSTANCE_HOME()
  path = home_id
  node = home
  while True:
    node = node.getPortalMaster()
    if node is None: break
    path = node.getHome().getId() + '/' + path
  jsonpath = '%s/var/%s/opensearch/%s.json'%(inst_home,path,home_id)
  f = open(jsonpath,'r')
  dictionary = f.read()
  f.close()

  import requests
  from requests.auth import HTTPBasicAuth
  import json
  url = self.getConfProperty('opensearch.url', 'https://localhost:9200')
  home_id = self.getHome().id
  username = self.getConfProperty('opensearch.username', 'admin')
  password = self.getConfProperty('opensearch.password', 'admin')
  verify = bool(self.getConfProperty('opensearch.ssl.verify', ''))
  auth = HTTPBasicAuth(username,password)
  headers = {'Content-type': 'application/x-ndjson'}
  response = requests.put('%s/%s/_bulk'%(url,home_id),auth=auth,headers=headers,data=dictionary,verify=verify)
  response.raise_for_status()
  json_obj = response.json()
  data = json.dumps(json_obj, separators=(",", ":"), indent=2)
  return data

# --// /manage_zcatalog_put_data //--]]>
      </item>
      <item key="description"><![CDATA[Put data?]]></item>
      <item key="execution" type="int">False</item>
      <item key="icon_clazz"><![CDATA[fas fa-cogs]]></item>
      <item key="id">manage_zcatalog_put_data</item>
      <item key="meta_type"><![CDATA[External Method]]></item>
      <item key="meta_types" type="list">
        <list>
          <item>*</item>
        </list>
      </item>
      <item key="name"><![CDATA[#3 Put data]]></item>
      <item key="package">com.zms.foundation.zcatalog.opensearch</item>
      <item key="revision">0.0.1</item>
      <item key="roles" type="list">
        <list>
          <item>*</item>
        </list>
      </item>
      <item key="title"><![CDATA[Put data]]></item>
    </dictionary>
  </item>
</list>