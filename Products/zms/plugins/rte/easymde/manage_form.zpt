<tal:block tal:replace="nothing">
################################################################################
###  EasyMDE - Markdown Editor
###  please refer to https://github.com/Ionaru/easy-markdown-editor
################################################################################
</tal:block>

<textarea tal:attributes="id python:'editor_%s'%request['elName']; name python:'editor_%s'%request['elName']"></textarea>

<div id="attr_url_markdown_div" class="d-none">
    <input type="text" id="attr_url_markdown" name="attr_url_markdown" class="form-control url-input">
    <div id="attr_url_dummy"></div>
</div>

<tal:block tal:condition="python:request.get('f_zmiRichtextOnSubmitEventHandler',True)">

<link rel="stylesheet" href="/++resource++zms_/easymde/easymde.min.css">
<script src="/++resource++zms_/easymde/easymde.min.js"></script>
<!--! marked.js.org: parser for dynamic preview -->
<script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>

<script>
//<!--
var elName = "text_" + getZMILang();
$("textarea#editor_" + elName).val($("textarea#" + elName).val());

var easymde = new EasyMDE({
    element: document.getElementById("editor_" + elName),
    toolbar: [
        "bold", "italic", "strikethrough", "heading", "|",
        "code", "quote", "unordered-list", "ordered-list", "|", {
            name: "custom",
            action: function customFunction(editor) {
                zmiBrowseObjs('form0','attr_url_markdown',getZMILang());
            },
            className: "fa fa-link",
            title: "Create Link"
        },
        "image", "table", "horizontal-rule", "clean-block", "|",
        "preview", "side-by-side", "fullscreen", "guide"
    ],
    previewRender: function(plainText, preview) { // Async method
        setTimeout(function() {
            preview.innerHTML = customMarkdownParser(plainText);
        }, 0);
        return "Loading...";
    },
});

$('#attr_url_markdown').on("change", function() {
    var data = easymde.value();
    var link_href = $('#attr_url_markdown').val();
    $.ajax({
        url: 'zmi_breadcrumbs_obj_path',
        data: {
            lang: getZMILang(),
            zmi_breadcrumbs_ref_obj_path: link_href
        },
        datatype: 'text',
        success: function(response) {
            $('#attr_url_dummy').html(response.trim());
            var link_text = $('#attr_url_dummy .breadcrumb').text().trim().replaceAll('\n', ' /');
            if (link_href !== '') {
                easymde.value(`$${data}\n[$${link_text}]($${link_href})`);
            }
        }
    });
});

function zmiStandardOnSubmitEventHandler(fm) {
    var data = easymde.value();
    $('#' + elName).val(data);
}

function zmiRichtextOnSubmitEventHandler(fm) {
    var el = document.getElementById('zmiRichtextEditor'+elName);
    if ( el != null && el.style.display != 'none' && el.style.visibility != 'hidden') {
        var data = easymde.value();
        $('#' + elName).val(data);
    }
}

function zmiRichtextInit(elName) {
    console.log('zmiRichtextInit: ' + elName);
}

// Prevent stacking by ensuring the event is only bound once
if (!window.htmxOnLoadBound) {
    window.htmxOnLoadBound = true;
    htmx.onLoad(function(content) {
        if (content !== document.body) {
            console.log('htmx: body element loaded: ' + elName);
            $ZMI.runReady();
            $('#editor_'+elName).hide();
        }
    });
}

function customMarkdownParser(plainText) {
    text = marked.parse(plainText);

    // https://stackoverflow.com/questions/136505/searching-for-uuids-in-text-with-regex
    const pattern = /[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}/ig;

    var uuids = text.match(pattern);
    if (uuids != null) {
        uuids.forEach(function(uuid) {
            $.ajax({
                url: '++rest_api/zmsindex',
                async: false,  // to set text in success below
                data: {
                    get_uid: 'uid:' + uuid,
                },
                datatype: 'json',
                success: function(response) {
                    text = text.replace('%7B$uid:' + uuid + '%7D', response[0].getPath);  // incorrect path for img src
                }
            });
        });
    }
    return text;
}

// -->
</script>

<tal:block tal:define="dummy0 python:request.set('f_zmiRichtextOnSubmitEventHandler',False)"></tal:block>
</tal:block>