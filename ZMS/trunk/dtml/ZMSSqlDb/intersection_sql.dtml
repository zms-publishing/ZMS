<dtml-in grid_cols mapping>
  <!-- +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-
       +- MULTIMULTISELECT
       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+- -->
 <dtml-if multimultiselect>
  <dtml-let mmsid="'%s_%s'%(multimultiselect.get('tablename'),multimultiselect.get('fk'))">
   <dtml-call "writeBlock('[%s.intersection_sql]: mmsid=%s'%(meta_type,mmsid))">
   <!-- ### DELETE -->
   <dtml-call "REQUEST.set('sqlStatement',[])">
   <dtml-call "sqlStatement.append('DELETE FROM ' + multimultiselect['tablename'] + ' ')">
   <dtml-call "sqlStatement.append('WHERE ' + multimultiselect['fk'] + '=' + _.str(sql_quote__(SESSION[sessqentitykey],primary_key,rowid)))">
   <dtml-call "REQUEST.set('sqlStatement',''.join(sqlStatement))">
   <dtml-try>
    <dtml-call "executeQuery(sqlStatement)">
   <dtml-except>
    <dtml-call "REQUEST.set('message',message+'SQL-ERROR: '+sqlStatement+'<br/>')"> 
   </dtml-try>
   <!-- ### INSERT -->
   <dtml-in "REQUEST.get(mmsid)">
    <dtml-let value=sequence-item fieldnames="[multimultiselect.get('fk')]" values="[sql_quote__(SESSION[sessqentitykey],primary_key,rowid)]">
     <dtml-in "multimultiselect.get('tables',[])" mapping>
      <dtml-let i=sequence-index item=sequence-item v="value.split('/')[i]">
       <dtml-if v>
        <dtml-call "fieldnames.append(fk)">
        <dtml-call "values.append(sql_quote__(item['tablename'],item['fieldname'],v))">
       </dtml-if>
      </dtml-let>
     </dtml-in>
     <dtml-call "REQUEST.set('sqlStatement',[])">
     <dtml-call "sqlStatement.append('INSERT INTO ' + multimultiselect['tablename'] + '(' + ', '.join(fieldnames) + ') VALUES (' + ', '.join(values) + ')')">
     <dtml-call "REQUEST.set('sqlStatement',''.join(sqlStatement))">
     <dtml-try>
      <dtml-call "writeBlock('[%s.intersection_sql]: executeQuery(%s)'%(meta_type,sqlStatement))">
      <dtml-call "executeQuery(sqlStatement)">
     <dtml-except>
      <dtml-call "REQUEST.set('message',message+'SQL-ERROR: '+sqlStatement+'<br/>')"> 
     </dtml-try>
    </dtml-let>
   </dtml-in>
  </dtml-let>
  <!-- +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-
       +- MULTISELECT
       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+- -->
 <dtml-elif multiselect>
  <dtml-unless "multiselect.get('custom') or multiselect.get('mysqlset')">
   <dtml-let intersection="getEntity(multiselect.get('tablename'))">
    <!-- ### DELETE -->
    <dtml-in "intersection['columns']" mapping>
     <dtml-let col=sequence-item>
      <dtml-if fk>
       <dtml-if "fk.get('tablename',_.None) == SESSION[sessqentitykey]">
        <dtml-call "REQUEST.set('src',col)">
       <dtml-else>
        <dtml-call "REQUEST.set('dst',col)">
       </dtml-if>
      </dtml-if>
     </dtml-let>
    </dtml-in>
    <dtml-call "REQUEST.set('sqlStatement',[])"
    ><dtml-call "sqlStatement.append('DELETE FROM ' + intersection['id'] + ' ')"
    ><dtml-call "sqlStatement.append('WHERE ' + src['id'] + '=' + sql_quote__(SESSION[sessqentitykey],primary_key,rowid))"
    ><dtml-call "REQUEST.set('sqlStatement',''.join(sqlStatement))"
    ><dtml-try
     ><dtml-call "writeBlock('[%s.intersection_sql]: executeQuery(%s)'%(meta_type,sqlStatement))"
     ><dtml-call "executeQuery(sqlStatement)"
     ><dtml-call "REQUEST.set('message',message+getZMILangStr('MSG_CHANGED')+' (MS: '+intersection['id']+')'+'<br/>')" 
    ><dtml-except
     ><dtml-call "REQUEST.set('message',message+'SQL-ERROR: '+sqlStatement+'<br/>')"
    ></dtml-try>
    <!-- ### INSERT -->
    <dtml-in "REQUEST.get('new_%s'%id,[])"
     ><dtml-let value=sequence-item
      ><dtml-call "REQUEST.set('sqlStatement',[])"
      ><dtml-call "sqlStatement.append('INSERT INTO ' + intersection['id'] + '( ')"
      ><dtml-call "REQUEST.set('c',0)"
      ><dtml-in "intersection['columns']" mapping
       ><dtml-let col=sequence-item
        ><dtml-if fk
         ><dtml-if c
          ><dtml-call "sqlStatement.append(', ')"
          ></dtml-if
         ><dtml-call "sqlStatement.append(col['id'])"
         ><dtml-call "REQUEST.set('c',c+1)"
        ></dtml-if
       ></dtml-let
      ></dtml-in
      ><dtml-call "sqlStatement.append(' ) VALUES ( ')"
      ><dtml-call "REQUEST.set('c',0)"
      ><dtml-in "intersection['columns']" mapping
       ><dtml-let col=sequence-item
        ><dtml-if fk
         ><dtml-if c
          ><dtml-call "sqlStatement.append(', ')"
         ></dtml-if
         ><dtml-if "fk.get('tablename',_.None) == SESSION[sessqentitykey]"
          ><dtml-call "sqlStatement.append(sql_quote__(SESSION[sessqentitykey],primary_key,rowid))"
         ><dtml-else
          ><dtml-call "sqlStatement.append(sql_quote__(intersection['id'],col['id'],value))"
         ></dtml-if
         ><dtml-call "REQUEST.set('c',c+1)"
        ></dtml-if
       ></dtml-let
      ></dtml-in
      ><dtml-call "sqlStatement.append(' )')"
      ><dtml-call "REQUEST.set('sqlStatement',''.join(sqlStatement))"
      ><dtml-try
       ><dtml-call "writeBlock('[%s.intersection_sql]: executeQuery(%s)'%(meta_type,sqlStatement))"
       ><dtml-call "executeQuery(sqlStatement)"
      ><dtml-except
       ><dtml-call "REQUEST.set('message',message+'SQL-ERROR: '+sqlStatement+'<br/>')"
      ></dtml-try
     ></dtml-let
    ></dtml-in
   ></dtml-let
  ></dtml-unless
 ></dtml-if
></dtml-in>
