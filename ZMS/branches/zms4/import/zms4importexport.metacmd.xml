<?xml version="1.0" encoding="utf-8"?>

<list>
  <item type="dictionary">
    <dictionary>
      <item key="data"><![CDATA[import base64
import os
import shutil
import tempfile
from OFS.CopySupport import absattr
from Products.zms import _blobfields
from Products.zms import _fileutil
from Products.zms import zopeutil

# @see zopeutil
def nextObject(container, meta_type):
  """
  Get next parent Zope-object with given meta_type.
  """
  while not container.meta_type == meta_type:
    container = container.aq_parent
  return container

# @see zopeutil
def getExternalMethodModuleName(container, id):
  """
  Add context-folder-id to module-name (to prevent deleting artefacts from other clients).
  """
  m = id
  if hasattr(container,'content') and int(getattr(container,'content').getConfProperty('zopeutil.getExternalMethodModuleName.addContextFolderId',True)):
    m = '%s.%s'%(absattr(nextObject(container,'Folder').id),m)
  return m

# @see zopeutil
def readData(ob, default=None):
  """
  Read data of Zope-object.
  """
  data = default
  if ob is None and default is not None:
    return default
  if ob.meta_type in [ 'DTML Document', 'DTML Method', 'Filesystem DTML Document', 'Filesystem DTML Method']:
    data = ob.raw
  elif ob.meta_type in [ 'File', 'Filesystem File', 'Filesystem Image', 'Image']:
    data = str(ob)
  elif ob.meta_type in [ 'Filesystem Page Template', 'Filesystem Script (Python)', 'Page Template', 'Script (Python)']:
    data = ob.read()
  elif ob.meta_type == 'External Method':
    context = ob
    id = ob.id
    while context is not None:
      m = getExternalMethodModuleName(context, id)
      filepath = INSTANCE_HOME+'/Extensions/'+m+'.py'
      if os.path.exists(filepath):
        break
      try:
        context = context.getParentNode()
      except:
        context = None
    if context is None:
      m = ob._module
    filepath = INSTANCE_HOME+'/Extensions/'+m+'.py'
    if os.path.exists(filepath):
      f = open(filepath, 'r')
      data = f.read()
      f.close()
  elif ob.meta_type == 'Z SQL Method':
    connection = ob.connection_id 
    params = ob.arguments_src
    data = '<connection>%s</connection>\n<params>%s</params>\n%s'%(connection,params,ob.src)
  return data

def exportZope(self):
      l = []
      def traverse(context, container_id):
        for childNode in context.objectValues():
          if childNode.meta_type in ['Folder', 'Filesystem Directory View']:
            newIds = childNode.getPhysicalPath()
            newIds = [container_id+'~'] + list(newIds[newIds.index(container_id)+1:])
            newId = '/'.join(newIds)
            newName = childNode.title_or_id()
            newType = childNode.meta_type
            newType = {'Filesystem Directory View':'Folder'}.get(newType,newType)
            newCustom = ''
            l.append({'id':newId,'name':newName,'type':newType,'data':newCustom})
            traverse(childNode, container_id)
          elif childNode.meta_type in ['DTML Document', 'DTML Method', 'External Method', 'Image', 'File', 'Filesystem File', 'Filesystem Image', 'Filesystem Page Template', 'Page Template', 'Script (Python)']:
            newIds = childNode.getPhysicalPath()
            newIds = [container_id+'~'] + list(newIds[newIds.index(container_id)+1:])
            newId = '/'.join(newIds)
            newName = childNode.title_or_id()
            newType = childNode.meta_type
            newType = {'Filesystem File':'File', 'Filesystem Image':'Image', 'Filesystem Page Template':'Page Template'}.get(newType,newType)
            newCustom = readData(childNode)
            if newCustom is None:
              newCustom = ''
            else:
              try:
                newCustom = unicode(newCustom).encode('utf-8')
              except:
                pass
              newCustom = base64.encodestring(newCustom)
            #newCustom = _blobfields.createBlobField(self, _blobfields.MyFile, file={'data':str(newCustom),'filename':str(childNode.id)})
            l.append({'id':newId,'name':newName,'type':newType,'data':newCustom})
      container = self.getHome()
      container_id = container.id
      traverse(container,'')
      for x in l:
        x['id'] = x['id'][x['id'].find(container_id)+len(container_id)+1:]
      return l

def exportSystem(self):
            value = self.get_conf_properties()
            export = self.getXmlHeader() + self.toXmlString(value,1)
            return export

def exportLangs(self):
            value = self.getLangs()
            export = self.getXmlHeader() + self.toXmlString(value,1)
            return export

def exportLangDict(self):
            value = self.get_lang_dict()
            export = self.getXmlHeader() + self.toXmlString(value,1)
            return export

# @see ZMSMetadictManager
def exportMetadictXml(self, ids=[]):
            value = []
            metadicts = self.metas
            for i in range(len(metadicts)/2):
              id = metadicts[i*2]
              dict = metadicts[i*2+1].copy()
              if id in ids or len(ids) == 0:
                dst_meta_types = []
                for meta_id in self.getMetaobjIds():
                  if id in self.getMetadictAttrs( meta_id):
                    dst_meta_types.append( meta_id)
                dict['dst_meta_types'] = dst_meta_types
                value.append(dict)
            if len(value) == 1:
              value = value[0]
            content_type = 'text/xml; charset=utf-8'
            filename = 'export.metadict.xml'
            export = self.getXmlHeader() + self.toXmlString(value,1)
            return export

# @see ZMSMetaCmdProvider
def exportMetacmdXml(self, ids=[]):
          value = []
          for id in self.getMetaCmdIds():
            if id in ids or len(ids) == 0:
              metaCmd = self.getMetaCmd(id)
              revision = metaCmd.get('revision','0.0.0')
              el_id = metaCmd['id']
              el_name = metaCmd['name']
              el_title = metaCmd.get('title','')
              el_meta_type = metaCmd['meta_type']
              el_description = metaCmd['description']
              el_icon_clazz = metaCmd.get('icon_clazz','')
              el_meta_types = metaCmd['meta_types']
              el_roles = metaCmd['roles']
              el_exec = metaCmd['exec']
              el_data = zopeutil.readObject(metaCmd['home'],metaCmd['id'])
              # Value.
              value.append({'id':el_id,'revision':revision,'name':el_name,'title':el_title,'description':el_description,'meta_types':el_meta_types,'roles':el_roles,'exec':el_exec,'icon_clazz':el_icon_clazz,'meta_type':el_meta_type,'data':el_data})
          # XML.
          if len(ids)==1:
            filename = '%s-%s.metacmd.xml'%(ids[0],revision)
          else:
            filename = 'export.metacmd.xml'
          content_type = 'text/xml; charset=utf-8'
          export = self.getXmlHeader() + self.toXmlString(value,1)
          return export

# @see ZMSTextformatManager
def exportTextformatXml(self, ids=[]):
        value = []
        fmts = self.textformats
        for i in range(len(fmts)/2):
          id = fmts[i*2]
          ob = fmts[i*2+1]
          if id in ids or len(ids) == 0:
            value.append({'key':id,'value':ob})
        if len(value)==1:
          value = value[0]
        content_type = 'text/xml; charset=utf-8'
        filename = 'export.textfmt.xml'
        export = self.getXmlHeader() + self.toXmlString(value,1)
        return export

# @see ZMSCharformatManager
def exportCharformatXml(self, ids=[]):
        value = filter( lambda x: x['id'] in ids or len(ids) == 0, self.getCharFormats())
        value = map( lambda x: x.copy(), value)
        for x in value:
          if x.get('btn'):
            x['btn'] = _blobfields.createBlobField( self, _blobfields.MyImage, file={'data':getattr( self, x.get('btn')).data,'filename':x.get('btn')})
        if len(value)==1:
          value = value[0]
        content_type = 'text/xml; charset=utf-8'
        filename = 'export.charfmt.xml'
        export = self.getXmlHeader() + self.toXmlString(value,1)
        return export

def manage_zms4export( self):
	request = self.REQUEST
	html = ''
	html += '<!DOCTYPE html>'
	html += '<html lang="en">'
	html += self.zmi_html_head(self,request)
	html += '<body class="%s">'%(' '.join(['zmi',request['lang'],'transition',self.meta_id]))
	html += self.zmi_body_header(self,request,options=[{'action':'#','label':'ZMS4 Export...'}])
	html += '<div id="zmi-tab">'
	html += self.zmi_breadcrumbs(self,request)
	html += '<form class="form-horizontal" method="post" enctype="multipart/form-data">'
	html += '<input type="hidden" name="form_id" value="manage_zms4export"/>'
	html += '<input type="hidden" name="lang" value="%s"/>'%request['lang']
	html += '<legend>ZMS4 Export...</legend>'

	# --- Export client.
	# ---------------------------------
	if request.form.get('btn')==self.getZMILangStr('BTN_EXPORT'):
		tempfolder = tempfile.mktemp()
		os.mkdir(tempfolder)
		if request.get('content')==1:
			data = self.toZippedXml(request)
			f = open(os.path.join(tempfolder,'content.zip'),'wb')
			f.write(data)
			f.close()
		if request.get('system')==1:
			data = exportSystem(self)
			f = open(os.path.join(tempfolder,'export.system.xml'),'wb')
			f.write(data)
			f.close()
		if request.get('languages')==1:
			data = exportLangs(self)
			f = open(os.path.join(tempfolder,'export.langs.xml'),'wb')
			f.write(data)
			f.close()
			data = exportLangDict(self)
			f = open(os.path.join(tempfolder,'export.langdict.xml'),'wb')
			f.write(data)
			f.close()
		if request.get('metadata')==1:
			data = exportMetadictXml(self.getMetaobjManager())
			f = open(os.path.join(tempfolder,'export.metadict.xml'),'wb')
			f.write(data)
			f.close()
		if request.get('metaobj')==1:
			data = self.getMetaobjManager().exportMetaobjXml(ids=[])
			f = open(os.path.join(tempfolder,'export.metaobj.xml'),'wb')
			f.write(data)
			f.close()
		if request.get('metacmd')==1:
			data = exportMetacmdXml(self.getMetacmdManager())
			f = open(os.path.join(tempfolder,'export.metacmd.xml'),'wb')
			f.write(data)
			f.close()
		if request.get('textformats')==1:
			data = exportTextformatXml(self.getFormatManager())
			f = open(os.path.join(tempfolder,'export.textfmt.xml'),'wb')
			f.write(data)
			f.close()
		if request.get('charformats')==1:
			data = exportCharformatXml(self.getFormatManager())
			f = open(os.path.join(tempfolder,'export.charfmt.xml'),'wb')
			f.write(data)
			f.close()
		if request.get('zope')==1:
			l = exportZope(self)
			data = self.getXmlHeader() + self.toXmlString(l,1)
			f = open(os.path.join(tempfolder,'zope.xml'),'wb')
			f.write(data)
			f.close()
		RESPONSE = request.RESPONSE
		RESPONSE.setHeader('Content-Type','application/zip')
		RESPONSE.setHeader('Content-Disposition','attachment;filename="export.%s.zip"'%self.getHome().id)
		zipfiles = _fileutil.getOSPath('%s/*'%tempfolder)
		data = _fileutil.buildZipArchive( zipfiles)
		shutil.rmtree(tempfolder)
		return data

	# --- Display form.
	# ---------------------------------
	else:
		html += '<div class="form-group">'
		html += '<label for="id" class="col-sm-3 control-label">%s</label>'%(self.getZMILangStr('Content'))
		html += '<div class="col-sm-9"><input name="content:int" type="checkbox" value="1" checked="checked"> <strong>%s</strong> (%s)</div>'%(self.getHome().id,unicode(self.getDocumentElement().getTitlealt(request),'utf-8'))
		html += '</div><!-- .form-group -->'
		html += '<div class="form-group">'
		html += '<label for="id" class="col-sm-3 control-label">%s</label>'%(self.getZMILangStr('TAB_SYSTEM'))
		html += '<div class="col-sm-9"><input name="system:int" type="checkbox" value="1" checked="checked"> %i %s</div>'%(len(self.get_conf_properties().keys()),unicode(self.getZMILangStr('ATTR_KEYS'),'utf-8'))
		html += '</div><!-- .form-group -->'
		html += '<div class="form-group">'
		html += '<label for="id" class="col-sm-3 control-label">%s</label>'%(self.getZMILangStr('TAB_LANGUAGES'))
		html += '<div class="col-sm-9"><input name="languages:int" type="checkbox" value="1" checked="checked"> %i %s</div>'%(len(self.get_lang_dict().keys()),unicode(self.getZMILangStr('ATTR_KEYS'),'utf-8'))
		html += '</div><!-- .form-group -->'
		html += '<div class="form-group">'
		html += '<label for="id" class="col-sm-3 control-label">%s</label>'%(self.getZMILangStr('TAB_METADATA'))
		html += '<div class="col-sm-9"><input name="metadata:int" type="checkbox" value="1" checked="checked"> %i %s</div>'%(len(self.getMetaobjManager().getMetadictAttrs()),unicode(self.getZMILangStr('ATTR_KEYS'),'utf-8'))
		html += '</div><!-- .form-group -->'
		html += '<div class="form-group">'
		html += '<label for="id" class="col-sm-3 control-label">%s</label>'%(self.getZMILangStr('TAB_METAOBJ'))
		html += '<div class="col-sm-9"><input name="metaobj:int" type="checkbox" value="1" checked="checked"> %i %s</div>'%(len(self.getMetaobjManager().getMetaobjIds()),unicode(self.getZMILangStr('ATTR_OBJECTS'),'utf-8'))
		html += '</div><!-- .form-group -->'
		html += '<div class="form-group">'
		html += '<label for="id" class="col-sm-3 control-label">%s</label>'%(self.getZMILangStr('TAB_METACMD'))
		html += '<div class="col-sm-9"><input name="metacmd:int" type="checkbox" value="1" checked="checked"> %i %s</div>'%(len(self.getMetacmdManager().getMetaCmdIds()),unicode(self.getZMILangStr('ATTR_OBJECTS'),'utf-8'))
		html += '</div><!-- .form-group -->'
		html += '<div class="form-group">'
		html += '<label for="id" class="col-sm-3 control-label">%s</label>'%(self.getZMILangStr('TAB_TEXTFORMATS'))
		html += '<div class="col-sm-9"><input name="textformats:int" type="checkbox" value="1" checked="checked"> %i %s</div>'%(len(self.getFormatManager().getTextFormats(request)),unicode(self.getZMILangStr('ATTR_KEYS'),'utf-8'))
		html += '</div><!-- .form-group -->'
		html += '<div class="form-group">'
		html += '<label for="id" class="col-sm-3 control-label">%s</label>'%(self.getZMILangStr('TAB_CHARFORMATS'))
		html += '<div class="col-sm-9"><input name="charformats:int" type="checkbox" value="1" checked="checked"> %i %s</div>'%(len(self.getFormatManager().getCharFormats()),unicode(self.getZMILangStr('ATTR_KEYS'),'utf-8'))
		html += '</div><!-- .form-group -->'
		html += '<div class="form-group">'
		html += '<label for="id" class="col-sm-3 control-label">Zope</label>'
		html += '<div class="col-sm-9"><input name="zope:int" type="checkbox" value="1" checked="checked"> <strong>%s</strong> %i %s</div>'%(self.getHome().id,len(exportZope(self)),unicode(self.getZMILangStr('ATTR_OBJECTS'),'utf-8'))
		html += '</div><!-- .form-group -->'
		html += '<div class="form-group">'
		html += '<div class="controls save">'
		html += '<button type="submit" name="btn" class="btn btn-primary" value="%s">%s</button>'%(unicode(self.getZMILangStr('BTN_EXPORT'),'utf-8'),unicode(self.getZMILangStr('BTN_EXPORT'),'utf-8'))
		html += '<button type="submit" name="btn" class="btn btn-default" value="%s">%s</button>'%(unicode(self.getZMILangStr('BTN_CANCEL'),'utf-8'),unicode(self.getZMILangStr('BTN_CANCEL'),'utf-8'))
		html += '</div>'
		html += '</div><!-- .form-group -->'

	# ---------------------------------

	html += '</form><!-- .form-horizontal -->'
	html += '<div style="clear:both;">&nbsp;</div>'
	html += '</div><!-- #zmi-tab -->'
	html += self.zmi_body_footer(self,request)
	html += '</body>'
	html += '</html>'

	return html]]>
      </item>
      <item key="description"></item>
      <item key="exec" type="int">0</item>
      <item key="icon_clazz">icon-download-alt</item>
      <item key="id">manage_zms4export</item>
      <item key="meta_type"><![CDATA[External Method]]></item>
      <item key="meta_types" type="list">
        <list>
          <item>ZMS</item>
        </list>
      </item>
      <item key="name"><![CDATA[ZMS4 Export...]]></item>
      <item key="revision">0.0.62</item>
      <item key="roles" type="list">
        <list>
          <item>ZMSAdministrator</item>
        </list>
      </item>
      <item key="title"><![CDATA[ZMS4 Export...]]></item>
    </dictionary>
  </item>
  <item type="dictionary">
    <dictionary>
      <item key="data"><![CDATA[import base64
import os
import shutil
import tempfile
import time
from Products.zms import _blobfields
from Products.zms import _fileutil
from Products.zms import standard
from Products.zms import zopeutil

def read_file(filepath):
		data = None
		if os.path.exists(filepath):
			f = open(filepath,'rb')
			data = f.read()
			f.close()
		return data

def manage_zms4import( self):
	request = self.REQUEST
	html = ''
	html += '<!DOCTYPE html>'
	html += '<html lang="en">'
	html += self.zmi_html_head(self,request)
	html += '<body class="%s">'%(' '.join(['zmi',request['lang'],'transition',self.meta_id]))
	html += self.zmi_body_header(self,request,options=[{'action':'#','label':'ZMS4 Export...'}])
	html += '<div id="zmi-tab">'
	html += self.zmi_breadcrumbs(self,request)
	html += '<form class="form-horizontal" method="post" enctype="multipart/form-data">'
	html += '<input type="hidden" name="form_id" value="manage_zms4import"/>'
	html += '<input type="hidden" name="lang" value="%s"/>'%request['lang']
	html += '<legend>ZMS4 Import...</legend>'

	# --- Import client.
	# ---------------------------------
	if request.form.get('btn')==self.getZMILangStr('BTN_IMPORT'):
		tempfolder = tempfile.mktemp()
		os.mkdir(tempfolder)
		filepath = os.path.join(tempfolder,'upload.zip')
		f = open(filepath,'wb')
		f.write(request['file'].read())
		f.close()
		_fileutil.extractZipArchive(filepath)
		os.remove(filepath)
		l = []
		filenames = os.listdir(tempfolder)

		filename = 'zope.xml'
		if filename in filenames:
			msg = ''
			try:
				if request.get('zope')==1:
					data = read_file(os.path.join(tempfolder,filename))
					o = self.parseXmlString(data)
					home = self.getHome()
					meta_types = ['DTML Document', 'DTML Method', 'External Method', 'Image', 'File', 'Folder', 'Page Template', 'Script (Python)']
					ids = home.objectIds(meta_types)
					home.manage_delObjects(ids=ids)
					for i in o:
						standard.writeBlock(self,'[manage_zms4import]: add %s (%s)'%(str(i['id']),str(i['type'])))
						try:
							container = home
							ids = i['id'].split('/')
							for id in ids[:-1]:
								container = getattr(container,id)
							if i['type'] in meta_types:
								data = base64.b64decode(i.get('data',''))
								zopeutil.addObject(container,i['type'],ids[-1],i['name'],data)
						except:
							standard.writeError(self,'[manage_zms4import]: can\'t add %s (%s)'%(str(i['id']),str(i['type'])))
					msg = 'OK'
			except:
				msg = self.writeError('can\'t import')
			l.append('%s (%s)'%(filename,msg))

		for filename in filenames:
			msg = ''
			try:
				t0 = time.time()
				data = read_file(os.path.join(tempfolder,filename))
				if request.get('system')==1 and filename.endswith('system.xml'):
					d = self.parseXmlString(data)
					for k in d.keys():
						self.setConfProperty(k,d[k])
					msg = 'OK'
				if request.get('languages')==1 and filename.endswith('langs.xml'):
					d = self.parseXmlString(data)
					prim_lang = [x for x in d if d[x]['parent']==''][0]
					self.setPrimaryLanguage(prim_lang)
					self.setLangs(d)
					msg = 'OK'
				if request.get('languages')==1 and filename.endswith('langdict.xml'):
					d = self.parseXmlString(data)
					self.set_lang_dict(d)
					msg = 'OK'
				if request.get('metadata')==1 and filename.endswith('metadict.xml'):
					self.getMetaobjManager().importMetadictXml(data)
					msg = 'OK'
				if request.get('metaobj')==1 and filename.endswith('metaobj.xml'):
					self.getMetaobjManager().importMetaobjXml(data)
					msg = 'OK'
				if request.get('metacmd')==1 and filename.endswith('metacmd.xml'):
					self.getMetacmdManager().importXml(data)
					msg = 'OK'
				if request.get('textformats')==1 and filename.endswith('textfmt.xml'):
					self.getFormatManager().importTextformatXml(data)
					msg = 'OK'
				if request.get('charformats')==1 and filename.endswith('charfmt.xml'):
					self.getFormatManager().importCharformatXml(data)
					msg = 'OK'
			except:
				msg = self.writeError('can\'t import')
			l.append('%s (%s)'%(filename,msg))

		self.synchronizeObjAttrs()

		filename = 'content.zip'
		if filename in filenames:
			msg = ''
			try:
				if request.get('content')==1:
					data = read_file(os.path.join(tempfolder,filename))
					class File:
						def __init__(self, filename, data):
							self.name = filename
							self.data = data
						def __str__(self):
							return self.data
					self.manage_import(File(filename,data),self.getPrimaryLanguage(),request)
					msg = 'OK'
			except:
				msg = self.writeError('can\'t import')
			l.append('%s (%s)'%(filename,msg))

		shutil.rmtree(tempfolder)
		html += '<div class="alert alert-success">%s</div>'%unicode(self.getZMILangStr('MSG_IMPORTED'),'utf-8')%'<em>%s (%s)</em>'%(request['file'].filename,str(l))

	# --- Display form.
	# ---------------------------------
	else:
		html += '<div class="form-group">'
		html += '<label for="id" class="col-sm-3 control-label">%s</label>'%(self.getZMILangStr('ATTR_FILE'))
		html += '<div class="col-sm-9"><input class="btn btn-file" name="file" type="file" /></div>'
		html += '</div><!-- .form-group -->'
		html += '<div class="form-group">'
		html += '<label for="id" class="col-sm-3 control-label">%s</label>'%(self.getZMILangStr('Content'))
		html += '<div class="col-sm-9"><input name="content:int" type="checkbox" value="1" checked="checked"> %s</div>'%(unicode(self.getZMILangStr('BTN_IMPORT'),'utf-8'))
		html += '</div><!-- .form-group -->'
		html += '<div class="form-group">'
		html += '<label for="id" class="col-sm-3 control-label">%s</label>'%(self.getZMILangStr('TAB_SYSTEM'))
		html += '<div class="col-sm-9"><input name="system:int" type="checkbox" value="1" checked="checked"> %s</div>'%(unicode(self.getZMILangStr('BTN_IMPORT'),'utf-8'))
		html += '</div><!-- .form-group -->'
		html += '<div class="form-group">'
		html += '<label for="id" class="col-sm-3 control-label">%s</label>'%(self.getZMILangStr('TAB_LANGUAGES'))
		html += '<div class="col-sm-9"><input name="languages:int" type="checkbox" value="1" checked="checked"> %s</div>'%(unicode(self.getZMILangStr('BTN_IMPORT'),'utf-8'))
		html += '</div><!-- .form-group -->'
		html += '<div class="form-group">'
		html += '<label for="id" class="col-sm-3 control-label">%s</label>'%(self.getZMILangStr('TAB_METADATA'))
		html += '<div class="col-sm-9"><input name="metadata:int" type="checkbox" value="1" checked="checked"> %s</div>'%(unicode(self.getZMILangStr('BTN_IMPORT'),'utf-8'))
		html += '</div><!-- .form-group -->'
		html += '<div class="form-group">'
		html += '<label for="id" class="col-sm-3 control-label">%s</label>'%(self.getZMILangStr('TAB_METAOBJ'))
		html += '<div class="col-sm-9"><input name="metaobj:int" type="checkbox" value="1" checked="checked"> %s</div>'%(unicode(self.getZMILangStr('BTN_IMPORT'),'utf-8'))
		html += '</div><!-- .form-group -->'
		html += '<div class="form-group">'
		html += '<label for="id" class="col-sm-3 control-label">%s</label>'%(self.getZMILangStr('TAB_METACMD'))
		html += '<div class="col-sm-9"><input name="metacmd:int" type="checkbox" value="1" checked="checked"> %s</div>'%(unicode(self.getZMILangStr('BTN_IMPORT'),'utf-8'))
		html += '</div><!-- .form-group -->'
		html += '<div class="form-group">'
		html += '<label for="id" class="col-sm-3 control-label">%s</label>'%(self.getZMILangStr('TAB_TEXTFORMATS'))
		html += '<div class="col-sm-9"><input name="textformats:int" type="checkbox" value="1" checked="checked"> %s</div>'%(unicode(self.getZMILangStr('BTN_IMPORT'),'utf-8'))
		html += '</div><!-- .form-group -->'
		html += '<div class="form-group">'
		html += '<label for="id" class="col-sm-3 control-label">%s</label>'%(self.getZMILangStr('TAB_CHARFORMATS'))
		html += '<div class="col-sm-9"><input name="charformats:int" type="checkbox" value="1" checked="checked"> %s</div>'%(unicode(self.getZMILangStr('BTN_IMPORT'),'utf-8'))
		html += '</div><!-- .form-group -->'
		html += '<div class="form-group">'
		html += '<label for="id" class="col-sm-3 control-label">Zope</label>'
		html += '<div class="col-sm-9"><input name="zope:int" type="checkbox" value="1" checked="checked"> %s</div>'%(unicode(self.getZMILangStr('BTN_IMPORT'),'utf-8'))
		html += '</div><!-- .form-group -->'
		html += '<div class="form-group">'
		html += '<div class="controls save">'
		html += '<button type="submit" name="btn" class="btn btn-primary" value="%s">%s</button>'%(unicode(self.getZMILangStr('BTN_IMPORT'),'utf-8'),unicode(self.getZMILangStr('BTN_IMPORT'),'utf-8'))
		html += '<button type="submit" name="btn" class="btn btn-default" value="%s">%s</button>'%(unicode(self.getZMILangStr('BTN_CANCEL'),'utf-8'),unicode(self.getZMILangStr('BTN_CANCEL'),'utf-8'))
		html += '</div>'
		html += '</div><!-- .form-group -->'

	# ---------------------------------

	html += '</form><!-- .form-horizontal -->'
	html += '<div style="clear:both;">&nbsp;</div>'
	html += '</div><!-- #zmi-tab -->'
	html += self.zmi_body_footer(self,request)
	html += '</body>'
	html += '</html>'

	return html]]>
      </item>
      <item key="description"></item>
      <item key="exec" type="int">0</item>
      <item key="icon_clazz">icon-upload-alt</item>
      <item key="id">manage_zms4import</item>
      <item key="meta_type"><![CDATA[External Method]]></item>
      <item key="meta_types" type="list">
        <list>
          <item>ZMS</item>
        </list>
      </item>
      <item key="name"><![CDATA[ZMS4 Import...]]></item>
      <item key="revision">0.0.29</item>
      <item key="roles" type="list">
        <list>
          <item>ZMSAdministrator</item>
        </list>
      </item>
      <item key="title"><![CDATA[ZMS4 Import...]]></item>
    </dictionary>
  </item>
</list>